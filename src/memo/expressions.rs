fn main() {
    // 全てを式で行う　ブロックも式

    // fnがブロックの内部で宣言された場合、そのスコープはそのブロックとなる
    // ブロック内部で宣言されたfnは、そのスコープのローカル変数や引数にはアクセスすることができない
    // let n = 0;
    // fn f() -> i32 {
    //     n
    // }

    // if let式を使う必要は厳密には無い　if let式ができることはmatch式でもできる　if let式は、パターンが1つしか無い場合のmatch式の省略形のようなもの

    // Rustには4つのループ式がある
    // ・while
    // ・while let
    // ・loop
    // ・for in

    // ループの値は常に()

    // ..演算子は範囲（range）を生成する
    assert_eq!(0..10, std::ops::Range { start: 0, end: 10 });

    // 型をコンパイラが推論できる場合には、型を省略した方が良いと考えられている

    // 繰り返し処理に使うことができるのは、開始点を含む範囲だけである
    // 配列のスライスについてはすべてのパターンが利用できる

    // 剰余の結果は左オペランドと同じ符号になる

    {
        // 型キャスト

        // 組み込み数値型の間ではキャストが可能
        // 浮動小数点値から、その値を表現するには小さすぎる整数値へのキャストを行うと、未定義動作となる

        // bool型の値、char型の値、enum型の値は、任意の整数型にキャストできる
        // 逆方向のキャストはできない（u8はcharにキャストできる）

        // 参照型に関するいくつかの型変換は単純なので、キャスト無しで行うことができる
        // ・mut参照 => mut参照でない参照
        // ・&Vec<i32> => &[i32]
        // ・&Box<T> => &T
    }
}
