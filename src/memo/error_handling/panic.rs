fn main() {
  // パニックが起きた場合、スタックを巻き戻すか、プロセスをアボートする　デフォルトは巻き戻す方

  {
      // パニックが起きると、
      // 1. スタックが巻き戻される
      // 一時的に作られた値、ローカル変数、実行中の関数が使っている引数が、作られたのと逆順にドロップされる
      // ユーザが定義したdropメソッドも呼び出される
      // 2. 実行中の関数がきれいになったら、それを呼び出した関数に移動し、同じように変数や引数をドロップしていく
      // それが終わったらその呼び出し元へ、というようにしてスタックを遡る
      // 3. 最後にスレッドが終了する
      // パニックを起こしたスレッドがメインスレッドだった場合には、プロセスが終了する（終了コードは0）

      // パニックの目的は、無効な配列参照などのおかしいことが起きたら、それによって何か良くないことが起きる前に、捕まえてしまおうということである

      // パニックはスレッド単位で発生する　あるスレッドがパニックを起こしても、他のスレッドは通常の動作を続けることができる

      // スタックの巻き戻しをキャッチし、スレッドを殺さずに実行を続けることもできる
      // std::panic::catch_unwind()を用いる
      // テストの際、アサーションが失敗しても、テストの実行が停止しないのはこの機能を使っているから
      // スレッドとcatch_unwind()を使ってパニックを処理することで、プログラムをより頑健にすることができる
      // これらのツールはスタックを巻き戻すパニックにだけしか使えない
  }

  {
      // スタックの巻き戻しを試みない場合が2つある
      // ・1つ目のパニックを巻き戻している最中に、.drop()メソッドで2つ目のパニックが起きた場合には、致命的な状態とみなされる
      // 　Rustは巻き戻しを中止して、プロセス全体を強制終了する
      // ・Rustのパニック動作はカスタマイズできる
      // 　コンパイル時に　-C panic=abort　と指定すると、最初のパニックでプログラムは即座にプロセスをアボートする
  }
}
