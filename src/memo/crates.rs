fn main() {
    // Rustはcrateで構成される

    // クレートがどのように構成され、どのように機能するのかを知るには、何らかの依存関係を持つプロジェクトを、cargo build --verboseを実行する

    // cargo buildを実行すると、Cargoは指定されたバージョンのクレートのソースコードをcrates.ioからダウンロードする
    // 次に、これらのクレートのCargo.tomlを読み、そのクレートが依存しているクレートを再起的にダウンロードする
    // 全てのソースコードを取得したら、Cargoは全てのクレートをコンパイルする
    // プロジェクトの依存グラフにある個々のクレートに対して、それぞれrustcを実行する
    // ライブラリをコンパイルするには、--crate-type libを用いる
    // こうすると、rustcはmain()関数を探さず、.rlibファイルを作るようになる
    // .rlibファイルはコンパイルされたコードが含まれていて、後でrustcコマンドの入力に使うことができる
    // 本体のプログラムをコンパイルする際には、オプションに--crate-type binを指定する
    // 結果はターゲット環境のバイナリ実行ファイルとなる

    // rustcコマンドを実行する際に、Cargoはそのクレートが利用するライブラリのファイル名を--externオプションで指定する
    // これにより、extern crate crossbeam;のような宣言がされていた際に、どこにコンパイル済みのクレートを探しに行くべきかをrustcに伝えている
    // Rustは.rlibファイルを、最終的な実行ファイルに静的にリンクする
    // .rlibには型情報も含まれている
}
